// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Web_shop.Migrations
{
    [DbContext(typeof(DucanPlusDbContext))]
    [Migration("20240628020127_AddInitialData")]
    partial class AddInitialData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.31")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CategoryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Kategorija svježeg voća",
                            IsActive = true,
                            Name = "Voće"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Kategorija svježeg povrća",
                            IsActive = true,
                            Name = "Povrće"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Kategorija svježeg mesa",
                            IsActive = true,
                            Name = "Meso"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Kategorija svježe ribe",
                            IsActive = true,
                            Name = "Riba"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Kategorija negaziranih pića",
                            IsActive = true,
                            Name = "Sok"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Kategorija sladoleda",
                            IsActive = true,
                            Name = "Sladoled"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Kategorija namještaja za domaćinstvo",
                            IsActive = true,
                            Name = "Namještaj"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Kategorija igračaka",
                            IsActive = true,
                            Name = "Igračke"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Kategorija mliječnih proizvoda",
                            IsActive = true,
                            Name = "Mliječni proizvodi"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Kategorija kruha i peciva",
                            IsActive = true,
                            Name = "Kruh i pecivo"
                        });
                });

            modelBuilder.Entity("ProductEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<decimal?>("CostPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dimensions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("MinimumStockLevel")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("RetailPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.Property<float?>("Weight")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CostPrice = 0.79m,
                            Description = "Svježe zelene jabuke 1kg",
                            Dimensions = "10x10x10",
                            ExpirationDate = new DateTime(2024, 7, 28, 2, 1, 27, 273, DateTimeKind.Utc).AddTicks(2039),
                            IsActive = true,
                            MinimumStockLevel = 20,
                            Name = "Jabuka",
                            Quantity = 100,
                            RetailPrice = 1.50m,
                            SupplierId = 1,
                            Weight = 1f
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            CostPrice = 0.60m,
                            Description = "Krumpiri za pečenje rinfuza 1kg",
                            Dimensions = "15x15x15",
                            ExpirationDate = new DateTime(2024, 7, 18, 2, 1, 27, 273, DateTimeKind.Utc).AddTicks(2049),
                            IsActive = true,
                            MinimumStockLevel = 50,
                            Name = "Krumpir",
                            Quantity = 200,
                            RetailPrice = 1.00m,
                            SupplierId = 2,
                            Weight = 1f
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 4,
                            CostPrice = 10.00m,
                            Description = "Svježi losos za gurmanske užitke 1kg",
                            Dimensions = "30x10x5",
                            ExpirationDate = new DateTime(2024, 7, 5, 2, 1, 27, 273, DateTimeKind.Utc).AddTicks(2051),
                            IsActive = true,
                            MinimumStockLevel = 10,
                            Name = "Svježi losos",
                            Quantity = 50,
                            RetailPrice = 15.00m,
                            SupplierId = 3,
                            Weight = 1f
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            CostPrice = 1.00m,
                            Description = "Svježe žute banane 1kg",
                            Dimensions = "20x15x10",
                            ExpirationDate = new DateTime(2024, 7, 8, 2, 1, 27, 273, DateTimeKind.Utc).AddTicks(2053),
                            IsActive = true,
                            MinimumStockLevel = 30,
                            Name = "Banana",
                            Quantity = 150,
                            RetailPrice = 2.00m,
                            SupplierId = 1,
                            Weight = 1f
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 1,
                            CostPrice = 1.20m,
                            Description = "Svježe naranče za sok 1kg",
                            Dimensions = "20x20x15",
                            ExpirationDate = new DateTime(2024, 7, 13, 2, 1, 27, 273, DateTimeKind.Utc).AddTicks(2055),
                            IsActive = true,
                            MinimumStockLevel = 25,
                            Name = "Naranča",
                            Quantity = 120,
                            RetailPrice = 2.50m,
                            SupplierId = 1,
                            Weight = 1f
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 2,
                            CostPrice = 0.80m,
                            Description = "Svježe rajčice 1kg",
                            Dimensions = "10x10x10",
                            ExpirationDate = new DateTime(2024, 7, 5, 2, 1, 27, 273, DateTimeKind.Utc).AddTicks(2057),
                            IsActive = true,
                            MinimumStockLevel = 40,
                            Name = "Rajčica",
                            Quantity = 180,
                            RetailPrice = 1.60m,
                            SupplierId = 2,
                            Weight = 1f
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 2,
                            CostPrice = 0.50m,
                            Description = "Zelena salata 1 komad",
                            Dimensions = "5x5x5",
                            ExpirationDate = new DateTime(2024, 7, 3, 2, 1, 27, 273, DateTimeKind.Utc).AddTicks(2058),
                            IsActive = true,
                            MinimumStockLevel = 50,
                            Name = "Zelena salata",
                            Quantity = 200,
                            RetailPrice = 1.00m,
                            SupplierId = 2,
                            Weight = 0.3f
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 3,
                            CostPrice = 3.00m,
                            Description = "Svježa piletina 1kg",
                            Dimensions = "30x20x10",
                            ExpirationDate = new DateTime(2024, 7, 5, 2, 1, 27, 273, DateTimeKind.Utc).AddTicks(2060),
                            IsActive = true,
                            MinimumStockLevel = 20,
                            Name = "Piletina",
                            Quantity = 90,
                            RetailPrice = 6.00m,
                            SupplierId = 3,
                            Weight = 1f
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 3,
                            CostPrice = 4.00m,
                            Description = "Svježa junetina za gulaš 1kg",
                            Dimensions = "30x20x10",
                            ExpirationDate = new DateTime(2024, 7, 8, 2, 1, 27, 273, DateTimeKind.Utc).AddTicks(2062),
                            IsActive = true,
                            MinimumStockLevel = 15,
                            Name = "Junetina",
                            Quantity = 70,
                            RetailPrice = 8.00m,
                            SupplierId = 3,
                            Weight = 1f
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 3,
                            CostPrice = 3.50m,
                            Description = "Svježa svinjetina za pečenje 1kg",
                            Dimensions = "30x20x10",
                            ExpirationDate = new DateTime(2024, 7, 8, 2, 1, 27, 273, DateTimeKind.Utc).AddTicks(2064),
                            IsActive = true,
                            MinimumStockLevel = 20,
                            Name = "Svinjetina",
                            Quantity = 80,
                            RetailPrice = 7.00m,
                            SupplierId = 3,
                            Weight = 1f
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 9,
                            CostPrice = 0.50m,
                            Description = "Svježe mlijeko 1L",
                            Dimensions = "10x10x10",
                            ExpirationDate = new DateTime(2024, 7, 3, 2, 1, 27, 273, DateTimeKind.Utc).AddTicks(2066),
                            IsActive = true,
                            MinimumStockLevel = 20,
                            Name = "Mlijeko",
                            Quantity = 100,
                            RetailPrice = 1.00m,
                            SupplierId = 4,
                            Weight = 1f
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 9,
                            CostPrice = 0.70m,
                            Description = "Jogurt 1L",
                            Dimensions = "10x10x10",
                            ExpirationDate = new DateTime(2024, 7, 3, 2, 1, 27, 273, DateTimeKind.Utc).AddTicks(2069),
                            IsActive = true,
                            MinimumStockLevel = 20,
                            Name = "Jogurt",
                            Quantity = 100,
                            RetailPrice = 1.50m,
                            SupplierId = 4,
                            Weight = 1f
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 9,
                            CostPrice = 0.50m,
                            Description = "Kefir 1kg",
                            Dimensions = "10x10x10",
                            ExpirationDate = new DateTime(2024, 7, 3, 2, 1, 27, 273, DateTimeKind.Utc).AddTicks(2071),
                            IsActive = true,
                            MinimumStockLevel = 20,
                            Name = "Kefir",
                            Quantity = 20,
                            RetailPrice = 1.00m,
                            SupplierId = 4,
                            Weight = 1f
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 6,
                            CostPrice = 2.00m,
                            Description = "Sladoled od vanilije 1L",
                            Dimensions = "10x10x10",
                            ExpirationDate = new DateTime(2024, 7, 28, 2, 1, 27, 273, DateTimeKind.Utc).AddTicks(2075),
                            IsActive = true,
                            MinimumStockLevel = 10,
                            Name = "Sladoled",
                            Quantity = 50,
                            RetailPrice = 3.00m,
                            SupplierId = 5,
                            Weight = 1f
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 10,
                            CostPrice = 0.50m,
                            Description = "Kruh od bijelog brašna 0,7kg",
                            Dimensions = "10x10x10",
                            ExpirationDate = new DateTime(2024, 6, 29, 2, 1, 27, 273, DateTimeKind.Utc).AddTicks(2086),
                            IsActive = true,
                            MinimumStockLevel = 20,
                            Name = "Kruh",
                            Quantity = 100,
                            RetailPrice = 1.00m,
                            SupplierId = 6,
                            Weight = 0.7f
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 10,
                            CostPrice = 0.20m,
                            Description = "Pecivo sa sirom 0,2kg",
                            Dimensions = "10x10x10",
                            ExpirationDate = new DateTime(2024, 6, 29, 2, 1, 27, 273, DateTimeKind.Utc).AddTicks(2087),
                            IsActive = true,
                            MinimumStockLevel = 20,
                            Name = "Pecivo",
                            Quantity = 100,
                            RetailPrice = 0.50m,
                            SupplierId = 6,
                            Weight = 0.2f
                        },
                        new
                        {
                            Id = 17,
                            CategoryId = 10,
                            CostPrice = 0.7m,
                            Description = "Kruh sa suncokretovim i bučinim sjemenkama 0,4kg",
                            Dimensions = "10x10x10",
                            ExpirationDate = new DateTime(2024, 6, 29, 2, 1, 27, 273, DateTimeKind.Utc).AddTicks(2090),
                            IsActive = true,
                            MinimumStockLevel = 10,
                            Name = "Kruh sa sjemenkama",
                            Quantity = 100,
                            RetailPrice = 2.10m,
                            SupplierId = 7,
                            Weight = 0.4f
                        },
                        new
                        {
                            Id = 18,
                            CategoryId = 4,
                            CostPrice = 5.00m,
                            Description = "Svježi brancin, idealan za pečenje, 1kg",
                            Dimensions = "25x15x5",
                            ExpirationDate = new DateTime(2024, 7, 3, 2, 1, 27, 273, DateTimeKind.Utc).AddTicks(2092),
                            IsActive = true,
                            MinimumStockLevel = 15,
                            Name = "Brancin",
                            Quantity = 60,
                            RetailPrice = 10.00m,
                            SupplierId = 4,
                            Weight = 1f
                        },
                        new
                        {
                            Id = 19,
                            CategoryId = 4,
                            CostPrice = 4.50m,
                            Description = "Svježa pastrva, odlična za roštilj, 1kg",
                            Dimensions = "20x10x5",
                            ExpirationDate = new DateTime(2024, 7, 3, 2, 1, 27, 273, DateTimeKind.Utc).AddTicks(2093),
                            IsActive = true,
                            MinimumStockLevel = 10,
                            Name = "Pastrva",
                            Quantity = 50,
                            RetailPrice = 9.00m,
                            SupplierId = 4,
                            Weight = 0.8f
                        },
                        new
                        {
                            Id = 20,
                            CategoryId = 5,
                            CostPrice = 0.80m,
                            Description = "Prirodni jabučni sok bez dodanog šećera 1l",
                            Dimensions = "10x10x30",
                            ExpirationDate = new DateTime(2024, 9, 26, 2, 1, 27, 273, DateTimeKind.Utc).AddTicks(2094),
                            IsActive = true,
                            MinimumStockLevel = 20,
                            Name = "Jabučni sok",
                            Quantity = 100,
                            RetailPrice = 1.60m,
                            SupplierId = 5,
                            Weight = 1f
                        },
                        new
                        {
                            Id = 21,
                            CategoryId = 5,
                            CostPrice = 0.90m,
                            Description = "100% prirodni narančin sok 1l",
                            Dimensions = "10x10x30",
                            ExpirationDate = new DateTime(2024, 9, 26, 2, 1, 27, 273, DateTimeKind.Utc).AddTicks(2096),
                            IsActive = true,
                            MinimumStockLevel = 20,
                            Name = "Narančin sok",
                            Quantity = 100,
                            RetailPrice = 1.80m,
                            SupplierId = 5,
                            Weight = 1f
                        },
                        new
                        {
                            Id = 22,
                            CategoryId = 5,
                            CostPrice = 1.00m,
                            Description = "Sok od grejpa bez dodatka šećera 1l",
                            Dimensions = "10x10x30",
                            ExpirationDate = new DateTime(2024, 9, 26, 2, 1, 27, 273, DateTimeKind.Utc).AddTicks(2099),
                            IsActive = true,
                            MinimumStockLevel = 20,
                            Name = "Sok od grejpa",
                            Quantity = 100,
                            RetailPrice = 2.00m,
                            SupplierId = 5,
                            Weight = 1f
                        },
                        new
                        {
                            Id = 23,
                            CategoryId = 6,
                            CostPrice = 2.50m,
                            Description = "Bogati čokoladni sladoled s komadićima čokolade 1L",
                            Dimensions = "10x10x10",
                            ExpirationDate = new DateTime(2024, 12, 25, 2, 1, 27, 273, DateTimeKind.Utc).AddTicks(2103),
                            IsActive = true,
                            MinimumStockLevel = 15,
                            Name = "Čokoladni sladoled",
                            Quantity = 80,
                            RetailPrice = 4.00m,
                            SupplierId = 5,
                            Weight = 1f
                        },
                        new
                        {
                            Id = 24,
                            CategoryId = 6,
                            CostPrice = 2.00m,
                            Description = "Osvežavajući sladoled od jagode 1L",
                            Dimensions = "10x10x10",
                            ExpirationDate = new DateTime(2024, 12, 25, 2, 1, 27, 273, DateTimeKind.Utc).AddTicks(2104),
                            IsActive = true,
                            MinimumStockLevel = 15,
                            Name = "Jagoda sladoled",
                            Quantity = 80,
                            RetailPrice = 3.50m,
                            SupplierId = 5,
                            Weight = 1f
                        },
                        new
                        {
                            Id = 25,
                            CategoryId = 7,
                            CostPrice = 20.00m,
                            Description = "Drveni noćni ormarić s ladicom",
                            Dimensions = "40x40x60",
                            ExpirationDate = new DateTime(2025, 6, 28, 2, 1, 27, 273, DateTimeKind.Utc).AddTicks(2106),
                            IsActive = true,
                            MinimumStockLevel = 5,
                            Name = "Noćni ormarić",
                            Quantity = 30,
                            RetailPrice = 40.00m,
                            SupplierId = 8,
                            Weight = 5f
                        },
                        new
                        {
                            Id = 26,
                            CategoryId = 7,
                            CostPrice = 30.00m,
                            Description = "Moderan stolić za kavu od masivnog drva",
                            Dimensions = "90x50x45",
                            ExpirationDate = new DateTime(2025, 6, 28, 2, 1, 27, 273, DateTimeKind.Utc).AddTicks(2107),
                            IsActive = true,
                            MinimumStockLevel = 3,
                            Name = "Stolić za kavu",
                            Quantity = 20,
                            RetailPrice = 60.00m,
                            SupplierId = 8,
                            Weight = 7f
                        },
                        new
                        {
                            Id = 27,
                            CategoryId = 7,
                            CostPrice = 15.00m,
                            Description = "Plutena zidna polica za knjige i dekoracije",
                            Dimensions = "100x20x20",
                            ExpirationDate = new DateTime(2025, 6, 28, 2, 1, 27, 273, DateTimeKind.Utc).AddTicks(2113),
                            IsActive = true,
                            MinimumStockLevel = 10,
                            Name = "Zidna polica",
                            Quantity = 50,
                            RetailPrice = 30.00m,
                            SupplierId = 8,
                            Weight = 3f
                        },
                        new
                        {
                            Id = 28,
                            CategoryId = 8,
                            CostPrice = 20.00m,
                            Description = "Kreativni Lego set za djecu",
                            Dimensions = "30x20x10",
                            ExpirationDate = new DateTime(2025, 6, 28, 2, 1, 27, 273, DateTimeKind.Utc).AddTicks(2115),
                            IsActive = true,
                            MinimumStockLevel = 10,
                            Name = "Lego set",
                            Quantity = 50,
                            RetailPrice = 40.00m,
                            SupplierId = 9,
                            Weight = 0.5f
                        },
                        new
                        {
                            Id = 29,
                            CategoryId = 8,
                            CostPrice = 15.00m,
                            Description = "Zabavna društvena igra za cijelu obitelj",
                            Dimensions = "40x25x5",
                            ExpirationDate = new DateTime(2025, 6, 28, 2, 1, 27, 273, DateTimeKind.Utc).AddTicks(2116),
                            IsActive = true,
                            MinimumStockLevel = 5,
                            Name = "Društvena igra",
                            Quantity = 40,
                            RetailPrice = 30.00m,
                            SupplierId = 9,
                            Weight = 1f
                        },
                        new
                        {
                            Id = 30,
                            CategoryId = 8,
                            CostPrice = 10.00m,
                            Description = "Mekani plišani medvjedić, idealan za poklon",
                            Dimensions = "15x15x25",
                            ExpirationDate = new DateTime(2025, 6, 28, 2, 1, 27, 273, DateTimeKind.Utc).AddTicks(2123),
                            IsActive = true,
                            MinimumStockLevel = 15,
                            Name = "Plush medvjedić",
                            Quantity = 60,
                            RetailPrice = 20.00m,
                            SupplierId = 9,
                            Weight = 0.2f
                        },
                        new
                        {
                            Id = 31,
                            CategoryId = 9,
                            CostPrice = 0.90m,
                            Description = "Prirodni jogurt bez dodataka, 1L",
                            Dimensions = "10x10x15",
                            ExpirationDate = new DateTime(2024, 7, 18, 2, 1, 27, 273, DateTimeKind.Utc).AddTicks(2134),
                            IsActive = true,
                            MinimumStockLevel = 20,
                            Name = "Jogurt",
                            Quantity = 100,
                            RetailPrice = 1.80m,
                            SupplierId = 10,
                            Weight = 1f
                        });
                });

            modelBuilder.Entity("RoleEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Administrator"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Korisnik"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Kupac"
                        });
                });

            modelBuilder.Entity("SupplierEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Suppliers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Ulica Voćnjaka 123",
                            Email = "kontakt@svjezevoce.hr",
                            IsActive = true,
                            Name = "Svježe Voće d.o.o.",
                            Phone = "123-456-7890"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Put Farme 456",
                            Email = "info@zelenepovrtnice.hr",
                            IsActive = true,
                            Name = "Zelene Povrtnice d.d.",
                            Phone = "234-567-8901"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Obalna Cesta 789",
                            Email = "prodaja@oceanikribe.hr",
                            IsActive = true,
                            Name = "Oceanik Ribe",
                            Phone = "345-678-9012"
                        },
                        new
                        {
                            Id = 4,
                            Address = "Mliječna Staza 101",
                            Email = "podrska@mlijecniuzici.hr",
                            IsActive = true,
                            Name = "Mliječni Užici",
                            Phone = "456-789-0123"
                        },
                        new
                        {
                            Id = 5,
                            Address = "Ledena Avenija 202",
                            Email = "narudzbe@smrznuteposlastice.hr",
                            IsActive = true,
                            Name = "Smrznute Poslastice d.o.o.",
                            Phone = "567-890-1234"
                        },
                        new
                        {
                            Id = 6,
                            Address = "Ulica Kruha 303",
                            Email = "zdravo@pekarskiraj.hr",
                            IsActive = true,
                            Name = "Pekarski Raj",
                            Phone = "678-901-2345"
                        },
                        new
                        {
                            Id = 7,
                            Address = "Ulica Udobnosti 404",
                            Email = "kontakt@namjestajzadom.hr",
                            IsActive = true,
                            Name = "Namještaj za Dom d.o.o.",
                            Phone = "789-012-3456"
                        },
                        new
                        {
                            Id = 8,
                            Address = "Avenija Igranja 505",
                            Email = "info@svijetigracaka.hr",
                            IsActive = true,
                            Name = "Svijet Igračaka",
                            Phone = "890-123-4567"
                        },
                        new
                        {
                            Id = 9,
                            Address = "Cesta Steka 606",
                            Email = "prodaja@gurmanskimesari.hr",
                            IsActive = true,
                            Name = "Gurmanski Mesari",
                            Phone = "901-234-5678"
                        },
                        new
                        {
                            Id = 10,
                            Address = "Put Jogurta 707",
                            Email = "podrska@prirodnijogurti.hr",
                            IsActive = true,
                            Name = "Prirodni Jogurti",
                            Phone = "012-345-6789"
                        });
                });

            modelBuilder.Entity("UserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateOfBirth = new DateTime(1987, 6, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mmatic@mail.hr",
                            IsActive = true,
                            Name = "Mate",
                            PasswordHash = "$2a$11$fOdyG76UzUn/YC0.G2eDfutwgQv37XehMSsS0hwqUUPJLfm3wWe9y",
                            PasswordSalt = "$2a$11$fOdyG76UzUn/YC0.G2eDfu",
                            RoleId = 2,
                            Surname = "Matić",
                            Username = "mmatic"
                        },
                        new
                        {
                            Id = 2,
                            DateOfBirth = new DateTime(1983, 1, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "iivic@mail.hr",
                            IsActive = true,
                            Name = "Ivo",
                            PasswordHash = "$2a$11$G3P5ADka.mwD6orjGqUAve8EGYF7cd3nzEFrNEE2MJ2.Pd5U6Ge2C",
                            PasswordSalt = "$2a$11$G3P5ADka.mwD6orjGqUAve",
                            RoleId = 3,
                            Surname = "Ivić",
                            Username = "iivic"
                        },
                        new
                        {
                            Id = 3,
                            DateOfBirth = new DateTime(1911, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "sysadm@mail.hr",
                            IsActive = true,
                            Name = "Sys",
                            PasswordHash = "$2a$11$4FZlPUdVaMms72CIBo4soe9BuIx8jUpa4s2YV4ik8aO2mHsnwiBY2",
                            PasswordSalt = "$2a$11$4FZlPUdVaMms72CIBo4soe",
                            RoleId = 1,
                            Surname = "Adm",
                            Username = "sa"
                        });
                });

            modelBuilder.Entity("Web_shop.Models.BasketEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Baskets");
                });

            modelBuilder.Entity("Web_shop.Models.BasketItemEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BasketId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("RetailPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("BasketId");

                    b.HasIndex("ProductId");

                    b.ToTable("BasketItems");
                });

            modelBuilder.Entity("Web_shop.Models.DeliveryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("RecipientName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Deliveries");
                });

            modelBuilder.Entity("Web_shop.Models.DeliveryItemEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DeliveryId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryId");

                    b.HasIndex("ProductId");

                    b.ToTable("DeliveryItems");
                });

            modelBuilder.Entity("ProductEntity", b =>
                {
                    b.HasOne("CategoryEntity", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SupplierEntity", "Supplier")
                        .WithMany("Products")
                        .HasForeignKey("SupplierId");

                    b.Navigation("Category");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("UserEntity", b =>
                {
                    b.HasOne("RoleEntity", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Web_shop.Models.BasketItemEntity", b =>
                {
                    b.HasOne("Web_shop.Models.BasketEntity", "Basket")
                        .WithMany("Items")
                        .HasForeignKey("BasketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProductEntity", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Basket");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Web_shop.Models.DeliveryEntity", b =>
                {
                    b.HasOne("UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Web_shop.Models.DeliveryItemEntity", b =>
                {
                    b.HasOne("Web_shop.Models.DeliveryEntity", "Delivery")
                        .WithMany("DeliveryItems")
                        .HasForeignKey("DeliveryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProductEntity", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Delivery");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SupplierEntity", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Web_shop.Models.BasketEntity", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Web_shop.Models.DeliveryEntity", b =>
                {
                    b.Navigation("DeliveryItems");
                });
#pragma warning restore 612, 618
        }
    }
}
